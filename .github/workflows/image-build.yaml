# name: Build and Push Custom OpenMetadata Image

# on:
#   push:
#     branches: [ main ]

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Login to Azure Container Registry
#       uses: azure/docker-login@v1
#       with:
#         login-server: dataworksdocs.azurecr.io
#         username: ${{ secrets.REGISTRY_USERNAME }}
#         password: ${{ secrets.REGISTRY_PASSWORD }}

#     - name: Build and push
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         push: true
#         tags: dataworksdocs.azurecr.io/dataworks-docs:latest


name: Build and Release OpenMetadata

on:
  workflow_dispatch:
    inputs:
      docker_release_tag:
        description: "Server Docker Image Tag"
        required: true
      push_latest_tag_to_release:
        description: "Do you want to update docker image latest tag as well?"
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Install antlr cli
        run: |
          sudo make install_antlr_cli

      - name: Setup jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Build OpenMetadata Server Application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -DskipTests clean package

      - name: Verify artifact
        run: |
          ls -la /home/runner/work/OpenMetadata/OpenMetadata/openmetadata-dist/target/

      - name: Upload OpenMetadata application to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openmetadata-binary
          path: /home/runner/work/OpenMetadata/OpenMetadata/openmetadata-dist/target/openmetadata*.tar.gz

  release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Fetch Release Data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: attach_release
        run: |
          echo "UPLOAD_URL=$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ inputs.docker_release_tag }}-release | jq .upload_url | tr -d '"' )" >> $GITHUB_OUTPUT

      - name: List artifacts
        run: |
          curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts

      - name: Download application from Artifact
        uses: actions/download-artifact@v4
        with:
          name: openmetadata-binary

      - name: Upload app to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: ./openmetadata*.tar.gz
          upload_url: ${{ steps.attach_release.outputs.UPLOAD_URL }}
          asset_name: openmetadata-${{ inputs.docker_release_tag }}.tar.gz
          asset_content_type: application/tar+gzip

  push_to_acr:
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: release
    steps:
      - name: Check out the Repo
        uses: actions/checkout@v4

      - name: Set build arguments
        id: build-args
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/openmetadata/server:${{ inputs.docker_release_tag }},${{ secrets.ACR_LOGIN_SERVER }}/openmetadata/server:latest
          file: ./docker/docker-compose-quickstart/Dockerfile
          build-args: |
            BUILD_DATE=${{ steps.build-args.outputs.BUILD_DATE }}
            COMMIT_ID=${{ github.sha }}
